.cpu cortex-m0
.thumb
.syntax unified
.fpu softvfp

.equ RCC,       0x40021000
.equ GPIOA,     0x48000000
.equ GPIOC,     0x48000800
.equ AHBENR,    0x14
.equ APB2ENR,   0x18
.equ APB1ENR,   0x1c
.equ IOPAEN,    0x20000
.equ IOPCEN,    0x80000
.equ SYSCFGCOMPEN, 1
.equ TIM3EN,    2
.equ MODER,     0x00
.equ OSPEEDR,   0x08
.equ PUPDR,     0x0c
.equ IDR,       0x10
.equ ODR,       0x14
.equ BSRR,      0x18
.equ BRR,       0x28
.equ PC8,       0x100

// SYSCFG control registers
.equ SYSCFG,    0x40010000
.equ EXTICR2,   0x0c

// NVIC control registers
.equ NVIC,      0xe000e000
.equ ISER,      0x100

// External interrupt control registers
.equ EXTI,      0x40010400
.equ IMR,       0
.equ RTSR,      0x8
.equ PR,        0x14

.equ TIM3,      0x40000400
.equ TIMCR1,    0x00
.equ DIER,      0x0c
.equ TIMSR,     0x10
.equ PSC,       0x28
.equ ARR,       0x2c

// Iinterrupt number for EXTI4_15 is 7.
.equ EXTI4_15_IRQn,  7
// Interrupt number for Timer 3 is 16.
.equ TIM3_IRQn,  16

//Student defined PSC and ARR values
.equ PSC_Val, 47999
.equ ARR_Val, 499


//=====================================================================
// Q1
//=====================================================================
.global euclidean
euclidean: //unsigned int a = R0, unsigned int b = R1
  PUSH {LR}
  CMP R0, R1
  BEQ return_a  //a == a
  BGT return_b    //a > b
  SUBS R1, R0 //euclidean(a,b-a)
  B euclidean
  POP {PC}    //Return
  return_a:
    POP {PC} //R0 = A already
  return_b:
    SUBS R0, R1 //return euclidean(a-b,b)
    B euclidean
    POP {PC}

//=====================================================================
// Q2
//=====================================================================
.global enable_porta
enable_porta: //RCC to enable the clock to GPIO Port A.
	PUSH {LR}
	LDR R0, =RCC
	LDR R1, [R0, #AHBENR]
	LDR R2, =IOPAEN
	ORRS R1, R2
	STR R1, [R0, #AHBENR]
	POP {PC}

//=====================================================================
// Q3
//=====================================================================
.global enable_portc
enable_portc:
	PUSH {LR}
	LDR R0, =RCC
	LDR R1, [R0, #AHBENR]
	LDR R2, =IOPCEN
	ORRS R1, R2
	STR R1, [R0, #AHBENR]
	POP {PC}

//=====================================================================
// Q4
//=====================================================================
.global setup_pa4
setup_pa4:
	//pin PA4 -> Input (Default)
	//Pull-up resistor enabled
	PUSH {LR}
	//Set to default value input
	LDR R0, =GPIOA
	LDR R1, =0x28000000
	STR R1, [R0, #MODER]
	//Set to default value, the enable pull up resistor.
	LDR R1, =0x24000000
	LDR R2, =0x100
	ORRS R1, R2
	STR R1, [R0, #PUPDR]
	POP {PC}

//=====================================================================
// Q5
//=====================================================================
.global setup_pa5
setup_pa5:
	//pin PA4 -> Input (Default)
	//Pull-down resistor enabled
	PUSH {LR}
	LDR R0, =GPIOA
	//Set to default value input
	LDR R1, =0x28000000
	STR R1, [R0, #MODER]

	//Set to default value PUPDR
	LDR R1, =0x24000000
	//Set to desired value
	LDR R2, =0x900
	ORRS R1, R2
	STR R1, [R0, #PUPDR]
	POP {PC}

//=====================================================================
// Q6
//=====================================================================
.global setup_pc8
setup_pc8:
	PUSH {LR}
	//Output
	LDR R0, =GPIOC
	//Clear bits
	LDR R1, [R0, #MODER]
	LDR R2, =0x30000
	BICS R1, R2
	STR R1, [R0, #MODER]
	//Set to desired value
	LDR R1, [R0, #MODER]
	LDR R2, =0x10000
	ORRS R1, R2
	STR R1, [R0, #MODER]

	//Set to Default Value
	LDR R1, [R0, #OSPEEDR]
	LDR R2, =0x30000
	BICS R1, R2
	STR R1, [R0, #OSPEEDR]

	//Output Speed: High Speed
	LDR R1, [R0, #OSPEEDR]
	LDR R2, =0x30000
	ORRS R1, R2
	STR R1, [R0, #OSPEEDR]
	POP {PC}

//=====================================================================
// Q7
//=====================================================================
.global setup_pc9
setup_pc9:
	PUSH {LR}
	//Output
	LDR R0, =GPIOC
	LDR R1, [R0, #MODER]
	LDR R2, =0xC0000
	BICS R1, R2
	STR R1, [R0, #MODER]

	LDR R1, [R0, #MODER]
	LDR R2, =0x40000
	ORRS R1, R2
	STR R1, [R0, #MODER]
	//Output Speed: Medium Speed
	LDR R1, [R0, #OSPEEDR]
	LDR R2, =0xC0000
	BICS R1, R2
	STR R1, [R0, #OSPEEDR]

	LDR R1, [R0, #OSPEEDR]
	LDR R2, =0x40000
	ORRS R1, R2
	STR R1, [R0, #OSPEEDR]
	POP {PC}

//=====================================================================
// Q8
//=====================================================================
.global action8
action8:
	PUSH {LR}
	LDR R0, =GPIOA
	LDR R1, [R0, #IDR]
	MOVS R2, #1 //Mask for ports
	LSRS R1, #4 //Shift port A by 4 positions
	ANDS R2, R1 //AND with mask -> Value of PA4
	LSRS R1, #1 //Shift port A by 1 more position to get port 5
	ANDS R3, R1 //AND with mask ->Value of PA5
	CMP R2, R3
	BGT pc_8_low
	//Otherwise, set PC8 to 1.
	LDR R0, =GPIOC
	LDR R2, =0x1 //Load Hexadecimal 1
	LSLS R2, #8//Shift by Bit number of Pin
	//Remember to clear BSRR
	LDR R1, [R0, #BSRR]
	BICS R1, R2
	ANDS R1, R2
	STR R1, [R0, #BSRR]
	POP {PC}
	pc_8_low:
	LDR R0, =GPIOC
	LDR R2, =0x1 //Load Hexadecimal 1
	LSLS R2, #8//Shift by Bit number of Pin
	//Remember to clear BRR
	LDR R1, [R0, #BSRR]
	BICS R1, R2
	ANDS R1, R2
	STR R1, [R0, #BRR]
	POP {PC}

//=====================================================================
// Q9
//=====================================================================
.global action9
action9:

	PUSH {LR}
	LDR R0, =GPIOA
	LDR R1, [R0, #IDR]
	MOVS R2, #1 //Mask for ports
	LSRS R1, #4 //Shift port A by 4 positions
	ANDS R2, R1 //AND with mask -> Value of PA4
	LSRS R1, #1 //Shift port A by 1 more position to get port 5
	ANDS R3, R1 //AND with mask ->Value of PA5
	CMP R3, R2
	BGT pc_8_low_1
	//Otherwise, set PC8 to 1.
	LDR R0, =GPIOC
	LDR R2, =0x1 //Load Hexadecimal 1
	LSLS R2, #9//Shift by Bit number of Pin
	STR R2, [R0, #BSRR]
	POP {PC}
	pc_8_low_1:
	LDR R0, =GPIOC
	LDR R2, =0x1 //Load Hexadecimal 1
	LSLS R2, #9//Shift by Bit number of Pin
	STR R2, [R0, #BRR]
	POP {PC}

//=====================================================================
// Q10
//=====================================================================
.type EXTI4_15_IRQHandler, %function
.global EXTI4_15_IRQHandler
EXTI4_15_IRQHandler:
	PUSH {LR}
	//Acknowledge interrupt
	LDR R0, =EXTI
	LDR R1, [R0, #PR]
	LDR R2, =0x1
	LSLS R2, #4
	ORRS R1, R2 //writing a 1 to bit 4
	STR R1, [R0, #PR] //Store back

	//Increment the global variable named 'counter'.
	LDR R1, =counter
	LDR R2, [R1]
	ADDS R2, #1
	STR R2, [R1]

	POP {PC}


//=====================================================================
// Q11
//=====================================================================
.global enable_exti4
enable_exti4:
	PUSH {LR}
	//enable the 48 MHz system clock to the SYSCFG subsystem.
	LDR R0, =RCC
	LDR R1, [R0, #APB2ENR]
	LDR R2, =SYSCFGCOMPEN //Bit 0 of APB2ENR
	ORRS R1, R2
	LDR R2, [R0, #APB2ENR]

	//set up the SYSCFG external interrupt configuration register 2 (see the FRM, page 177) to use pin PA4 for the interrupt source
	LDR R0,  =SYSCFG
	LDR R1, [R0, #EXTICR2]
	LDR R2, =0x0
	ORRS R1, R2 //I don't know if this is correct
	STR R1, [R0, #EXTICR2]

	//configure the EXTI_RTSR (see the FRM, page 224) to trigger on the rising edge of PA4
	LDR R0, =EXTI
	LDR R1, [R0, #RTSR]
	LDR R2, =0x100 //Enable TR4 -> PA4 //EXTI_4, bit 1
	ORRS R1, R2
	STR R1, [R0, #RTSR]

	//set the EXTI_IMR to not ignore pin number 4
	LDR R0, =EXTI
	LDR R1, [R0, #IMR]
	LDR R2, =0x100
	ORRS R1, R2
	STR R1, [R0, #IMR]

	//configure the NVIC to enable the EXTI4_15_IRQHandler
	LDR R0, =NVIC
	LDR R1, =ISER
	LDR R2, =(1<<EXTI4_15_IRQn)
	STR R2, [R0, R1]

	POP {PC}


//=====================================================================
// Q12
//=====================================================================
.type TIM3_IRQHandler, %function
.global TIM3_IRQHandler
TIM3_IRQHandler:
	PUSH {LR}
	//Toggles PC9 (the green LED).
	LDR R0, =GPIOC
    LDR R1, [R0, #ODR]
   	LDR R2, =0x200
   	EORS R1, R2
   	STR R1, [R0, #ODR]

	//Acknowledges the interrupt by clearing the Timer 3 update interrupt flag.
	LDR R0, =TIM3
    LDR R1, [R0, #TIMSR]
   	MOVS R2, #1
   	BICS R1, R2
   	STR R1,[R0, #TIMSR]
	POP {PC}
//=====================================================================
// Q13
//=====================================================================
.global enable_tim3
enable_tim3:
	PUSH {LR}
	//Enables the 48 MHz system clock to the timer 3 subsystem.
	LDR R0, =RCC
	LDR R1, [R0, #APB1ENR]
	LDR R2, =TIM3EN
	ORRS R1, R2
	STR R1, [R0, #APB1ENR]

	//Configures the Auto-Reload Register and Prescaler of Timer 3 so that an update event occurs exactly twice per second.
	LDR R0, =TIM3
	LDR R1, =PSC_Val
	STR R1, [R0, #PSC]
	LDR R1, =ARR_Val
	STR R1, [R0, #ARR]

	//Set the DIER of Timer 3 so that an interrupt occurs on an update event.
	LDR R0, =TIM3
	LDR R1, [R0, #DIER]
	MOVS R2, #1
	ORRS R1, R2
	STR R1, [R0, #DIER]

	//Write the appropriate bit to the NVIC ISER so that the interrupt for the Timer 3 update event is enabled.
	LDR R0, =NVIC
	LDR R1, =ISER
	LDR R2, =(1<<TIM3_IRQn)
	STR R2, [R0, R1]


	//Enable the counter for Timer 3.
	LDR R0, =TIM3
	LDR R1, [R0, #TIMCR1]
	MOVS R2, #1
	ORRS R1, R2
	STR R1, [R0, #TIMCR1]



	POP {PC}
